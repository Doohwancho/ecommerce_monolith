server:
  port: ${SERVER_PORT:8080}
  #  port: 8081
  servlet:
    session:
      timeout: 30m  # 30 minutes
  connection-timeout: 1800000  # 30 minutes in milliseconds. 
  tomcat:
    connection-timeout: 1800000  # 30 minutes in milliseconds
spring:
  config:
    activate:
      on-profile: prod
  mvc:
    async:
      request-timeout: 1800000  # 30 minutes in milliseconds
  datasource:
    platform: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${RDS_ENDPOINT}:${RDS_PORT:3306}/${RDS_DATABASE}?serverTimezone=Asia/Seoul&rewriteBatchedStatements=true #for local development
    #    url: jdbc:mysql://mysql:3306/ecommerce-database?serverTimezone=Asia/Seoul #for docker
    username: ${RDS_USERNAME:admin}
    #    password: root #mysql로 접속시 root유저의 비밀번호 또한 root로 설정함.
    password: ${RDS_PASSWORD:adminPassword} #local에서 접속시엔 root user's password is null
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl_auto: create
      # 1. none: no action will be taken. safest for producion
      # 2. update: Hibernate will update the schema to reflect the entity classes. If tables or columns are missing in the database, Hibernate will add them. However, it will not remove any tables or columns that are no longer used in the entity classes. This option can be convenient during development but may pose risks in a production environment due to unintended changes
      # 3. create: Hibernate will create the database schema afresh, destroying any existing data. This option is suitable for initial development or testing when starting with a clean slate
      # 4. validate: Hibernate will validate that the tables and columns in the database match the mappings in the entity classes. If there are discrepancies, the application will not start until they are resolved
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #@Table에서 지정한 설정대로 그대로 사용할 수 있다. RDS-aws가 테이블 이름을 소문자로 입력하는 문제를 수정한다.
    properties.hibernate:
      dialect: org.hibernate.dialect.MySQL8Dialect
      format_sql: false
      show-sql: false
      #      generate_statistics: false
      open-in-view: false # TODO - OIV 자세히 알아보기. log level: WARNING - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering.
      default_batch_fetch_size: 1000
#  batch:
#    initialize-schema: always
#    job:
#      enabled: false #true로 하면 @Bean으로 등록된 cron batch steps들이 시작과 동시에 자동 실행되니까 false로 꺼둔다.
#  redis:
#    host: ${REDIS_ENDPOINT}
#    port: ${REDIS_PORT:6379}
#  session:
#    store-type: redis
#    timeout: 30m
logging:
  level:
    root: WARN #DEBUG, INFO, WARN
    org:
      hibernate:
        SQL: ERROR #DEBUG, WARN, ERROR
        type: ERROR #INFO, WARN, ERROR
      springframework:
        security: WARN
        web:
          filter:
            CommonsRequestLoggingFilter: WARN
management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true
  endpoint:
    prometheus:
      enabled: true
